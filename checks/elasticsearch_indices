#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# Copyright (C) 2017, 2018 comNET GmbH
#
# This file is part of check_elasticsearch.
# 
# check_elasticsearch is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Foobar is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with check_elasticsearch.  If not, see <http://www.gnu.org/licenses/>.

# Changelog:
# Fabian Binder - comNET GmbH - 2017-05-26
# Fabian Binder - comNET GmbH - 2018-03-28 - Refactored

def inventory_elasticsearch_indices(info):
    for title, count, size in info:
        yield title, None

def check_elasticsearch_indices(item, params, info):
    for title, count, size in info:
        if item == title:

            perfdata = []

            status = 0
            count, size = map(int, (count, size))

            perfdata.append(("elasticsearch_count", count))
            perfdata.append(("elasticsearch_size", size))

            # Calculate rates for count and size

            this_time = time.time()

            docs_average = 30
            size_average = 30

            count_rate = get_rate("elasticsearch_indices.count.%s" % item, this_time, count) * 60
            size_rate = get_rate("elasticsearch_indices.size.%s" % item, this_time, size) * 60

            if params:
                docs_warn, docs_crit, docs_average = params["docs_count_delta"]
                size_warn, size_crit, size_average = params["size_delta"]

            for what, value in [ ("count", count_rate), ("size", size_rate) ]:
                perfdata.append(( "elasticsearch_%s_rate" % what, value))
                if what == "count":
                    message = "Average: %s docs (%.2f per minute)" % ('{:,}'.format(count), count_rate)
                    avg_rate = get_average("elasticsearch_indices.%s.%s.avg" % (what, item), this_time, value, docs_average)
                    if params:
                        if count_rate > (avg_rate * (docs_crit / 100 + 1)):
                            status = 2
                        elif count_rate > (avg_rate * (docs_warn / 100 + 1)):
                            status = max(1, state)
                        message += " (warn/crit: %.2f/%.2f)" % ((avg_rate * (docs_warn / 100 + 1)), (avg_rate * (docs_crit / 100 + 1)))
                    perfdata.append(("elasticsearch_%s_avg" % what, avg_rate))
                    yield status, message
                elif what == "size":
                    message = "Average size: %s (%s per minute)"% (get_bytes_human_readable(size), get_bytes_human_readable(size_rate))
                    avg_rate = get_average("elasticsearch_indices.%s.%s.avg" % (what, item), this_time, value, size_average)
                    if params:
                        if size_rate > (avg_rate * (size_crit / 100 + 1)):
                            status = 2
                        elif size_rate > (avg_rate * (size_warn / 100 + 1)):
                            status = max(1, state)
                        message += " (warn/crit: %s/%s)" % (get_bytes_human_readable((avg_rate * (size_warn / 100 + 1))), get_bytes_human_readable((avg_rate * (size_crit / 100 + 1))))
                    perfdata.append(("elasticsearch_%s_avg" % what, avg_rate))
                    yield status, message

            yield 0, None, perfdata

check_info["elasticsearch_indices"]  = {
    "check_function"     : check_elasticsearch_indices,
    "inventory_function" : inventory_elasticsearch_indices,
    "service_description": "Elasticsearch indices",
    "has_perfdata"       : True,
    "group"              : "elasticsearch_indices",
}
