#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# Copyright (C) 2018 comNET GmbH
#
# This file is part of check_elasticsearch.
# 
# check_elasticsearch is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Foobar is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with check_elasticsearch.  If not, see <http://www.gnu.org/licenses/>.

# Changelog:
# Fabian Binder - comNET GmbH - 2018-11-07
# Fabian Binder - comNET GmbH - 2018-03-28 - Refactored

def inventory_elasticsearch_health(info):
    for title, value in info:
        if title not in ("active_shards", "active_shards_percent_as_number", "delayed_unassigned_shards", \
                         "initializing_shards", "number_of_data_nodes", "number_of_nodes", \
                         "number_of_pending_tasks", "relocating_shards", "task_max_waiting_in_queue_millis", \
                         "timed_out", "unassigned_shards", "active_primary_shards" ):
            yield title, None

def check_elasticsearch_health(item, params, info):
    for title, value in info:
        if item == title:
            state = 0

            if item == "status":
                if value == "yellow":
                    state = 1
                elif value == "red":
                    state = 2

            try:
                perfdata = [(item, int(value))]
                return state, value, perfdata
            except:
                return state, value

check_info["elasticsearch_health"]  = {
    "check_function"     : check_elasticsearch_health,
    "inventory_function" : inventory_elasticsearch_health,
    "service_description": "Elasticsearch %s",
    "has_perfdata"       : True,
    "group"              : "elasticsearch_health",
}

#   .--active-shards--------------------------------------------------------.
#   |                 _   _              _____ _                   _        |
#   |       /\       | | (_)            / ____| |                 | |       |
#   |      /  \   ___| |_ ___   _____  | (___ | |__   __ _ _ __ __| |___    |
#   |     / /\ \ / __| __| \ \ / / _ \  \___ \| '_ \ / _` | '__/ _` / __|   |
#   |    / ____ \ (__| |_| |\ V /  __/  ____) | | | | (_| | | | (_| \__ \   |
#   |   /_/    \_\___|\__|_| \_/ \___| |_____/|_| |_|\__,_|_|  \__,_|___/   |
#   |                                                                       |
#   '-----------------------------------------------------------------------'

def inventory_elasticsearch_health_active_shards(info):
    return [(None, None)]

def check_elasticsearch_health_active_shards(_no_item, _no_params, info):
    for title, value in info:
        if title == "active_shards":
            active_shards = int(value)
        elif title == "active_primary_shards":
            active_primary_shards = int(value)

    perfdata = [("active_primary_shards", active_primary_shards), ("active_shards", active_shards)]
    warn = active_primary_shards * 2

    if active_shards < warn:
        state = 1
    else:
        state = 0

    return state, "Active shards: %s (%s primary) (warn at less than %s)" % (active_shards, active_primary_shards, warn), perfdata


check_info['elasticsearch_health.active_shards'] = {
    "inventory_function"  : inventory_elasticsearch_health_active_shards,
    "check_function"      : check_elasticsearch_health_active_shards,
    "service_description" : "Elasticsearch active Shards",
    "has_perfdata"        : True,
}


factory_settings["elasticsearch_active_shards_percent"] = { "levels": (100.0, 50.0) }

def inventory_elasticsearch_health_active_shards_percent_as_number(info):
    return [(None, {})]

def check_elasticsearch_health_active_shards_percent_as_number(_no_item, params, info):
    for title, value in info:
        if title == "active_shards_percent_as_number":
            active_shards = float(value)

    perfdata = [("active_shards_percent_as_number", active_shards)]
    warn, crit = params.get("levels")

    if active_shards < crit:
        state = 2
    elif active_shards < warn:
        state = 1
    else:
        state = 0

    return state, "Active shards: %s%% (warn/crit at less than %s%%/%s%%)" % (active_shards, warn, crit), perfdata


check_info['elasticsearch_health.active_shards_percent_as_number'] = {
    "inventory_function"        : inventory_elasticsearch_health_active_shards_percent_as_number,
    "check_function"            : check_elasticsearch_health_active_shards_percent_as_number,
    "default_levels_variable"   : "elasticsearch_nodestats_cpu",
    "service_description"       : "Elasticsearch active Shards in percent",
    "has_perfdata"              : True,
    "group"                     : "elasticsearch_active_shards_percent",
}

#   .--delayed-unassigned-shards------------------------------------------------.
#   |    ___      _                  _                                          |
#   |   |   \ ___| |__ _ _  _ ___ __| |                                         |
#   |   | |) / -_) / _` | || / -_) _` |                                         |
#   |   |___/\___|_\__,_|\_, \___\__,_|                                         |
#   |                    |__/ _                  _      _                _      |
#   |    _  _ _ _  __ _ _____(_)__ _ _ _  ___ __| |  __| |_  __ _ _ _ __| |___  |
#   |   | || | ' \/ _` (_-<_-< / _` | ' \/ -_) _` | (_-< ' \/ _` | '_/ _` (_-<  |
#   |    \_,_|_||_\__,_/__/__/_\__, |_||_\___\__,_| /__/_||_\__,_|_| \__,_/__/  |
#   |                          |___/                                            |
#   |                                                                           |
#   '---------------------------------------------------------------------------'


factory_settings["elasticsearch_delayed_unassigned_shards"] = { "levels": (0, 10) }

def inventory_elasticsearch_health_delayed_unassigned_shards(info):
    return [(None, {})]

def check_elasticsearch_health_delayed_unassigned_shards(_no_item, params, info):
    for title, value in info:
        if title == "delayed_unassigned_shards":
            delayed_shards = int(value)

    perfdata = [("delayed_unassigned_shards", delayed_shards)]
    warn, crit = params.get("levels")

    if delayed_shards > crit:
        state = 2
    elif delayed_shards > warn:
        state = 1
    else:
        state = 0

    return state, "Delayed unassigned shards: %s (warn/crit at more than %s/%s)" % (delayed_shards, warn, crit), perfdata


check_info['elasticsearch_health.delayed_unassigned_shards'] = {
    "inventory_function"        : inventory_elasticsearch_health_delayed_unassigned_shards,
    "check_function"            : check_elasticsearch_health_delayed_unassigned_shards,
    "default_levels_variable"   : "elasticsearch_delayed_unassigned_shards",
    "service_description"       : "Elasticsearch delayed unassigned Shards",
    "has_perfdata"              : True,
    "group"                     : "elasticsearch_delayed_unassigned_shards",
}

#   .--initializing-shards-----------------------------------------------------------------.
#   |    _____       _ _   _       _ _     _                   _                   _       |
#   |   |_   _|     (_) | (_)     | (_)   (_)                 | |                 | |      |
#   |     | |  _ __  _| |_ _  __ _| |_ _____ _ __   __ _   ___| |__   __ _ _ __ __| |___   |
#   |     | | | '_ \| | __| |/ _` | | |_  / | '_ \ / _` | / __| '_ \ / _` | '__/ _` / __|  |
#   |    _| |_| | | | | |_| | (_| | | |/ /| | | | | (_| | \__ \ | | | (_| | | | (_| \__ \  |
#   |   |_____|_| |_|_|\__|_|\__,_|_|_/___|_|_| |_|\__, | |___/_| |_|\__,_|_|  \__,_|___/  |
#   |                                               __/ |                                  |
#   |                                              |___/                                   |
#   '--------------------------------------------------------------------------------------'


factory_settings["elasticsearch_initializing_shards"] = { "levels": (0, 10) }

def inventory_elasticsearch_health_initializing_shards(info):
    return [(None, {})]

def check_elasticsearch_health_initializing_shards(_no_item, params, info):
    for title, value in info:
        if title == "initializing_shards":
            initializing_shards = int(value)

    perfdata = [("initializing_shards", initializing_shards)]
    warn, crit = params.get("levels")

    if initializing_shards > crit:
        state = 2
    elif initializing_shards > warn:
        state = 1
    else:
        state = 0

    return state, "Initializing shards: %s (warn/crit at more than %s/%s)" % (initializing_shards, warn, crit), perfdata


check_info['elasticsearch_health.initializing_shards'] = {
    "inventory_function"        : inventory_elasticsearch_health_initializing_shards,
    "check_function"            : check_elasticsearch_health_initializing_shards,
    "default_levels_variable"   : "elasticsearch_initializing_shards",
    "service_description"       : "Elasticsearch initializing Shards",
    "has_perfdata"              : True,
    "group"                     : "elasticsearch_initializing_shards",
}

#   .--data-nodes--------------------------------------------------------------------------.
#   |    _____        _                          _                                         |
#   |   |  __ \      | |                        | |                                        |
#   |   | |  | | __ _| |_ __ _   _ __   ___   __| | ___  ___                               |
#   |   | |  | |/ _` | __/ _` | | '_ \ / _ \ / _` |/ _ \/ __|                              |
#   |   | |__| | (_| | || (_| | | | | | (_) | (_| |  __/\__ \                              |
#   |   |_____/ \__,_|\__\__,_| |_| |_|\___/ \__,_|\___||___/                              |
#   |                                                                                      |
#   '--------------------------------------------------------------------------------------'


factory_settings["elasticsearch_data_nodes"] = { "levels": (3, 2) }

def inventory_elasticsearch_health_number_of_data_nodes(info):
    return [(None, {})]

def check_elasticsearch_health_number_of_data_nodes(_no_item, params, info):
    for title, value in info:
        if title == "number_of_data_nodes":
            number_of_data_nodes = int(value)

    perfdata = [("number_of_data_nodes", number_of_data_nodes)]
    warn, crit = params.get("levels")

    if number_of_data_nodes < crit:
        state = 2
    elif number_of_data_nodes < warn:
        state = 1
    else:
        state = 0

    return state, "Number of data nodes: %s (warn/crit at less than %s/%s)" % (number_of_data_nodes, warn, crit), perfdata


check_info['elasticsearch_health.number_of_data_nodes'] = {
    "inventory_function"        : inventory_elasticsearch_health_number_of_data_nodes,
    "check_function"            : check_elasticsearch_health_number_of_data_nodes,
    "default_levels_variable"   : "elasticsearch_data_nodes",
    "service_description"       : "Elasticsearch Data Nodes",
    "has_perfdata"              : True,
    "group"                     : "elasticsearch_data_nodes",
}

#   .--nodes-count--------------------------------------------------.
#   |    _   _           _                                   _      |
#   |   | \ | |         | |                                 | |     |
#   |   |  \| | ___   __| | ___  ___    ___ ___  _   _ _ __ | |_    |
#   |   | . ` |/ _ \ / _` |/ _ \/ __|  / __/ _ \| | | | '_ \| __|   |
#   |   | |\  | (_) | (_| |  __/\__ \ | (_| (_) | |_| | | | | |_    |
#   |   |_| \_|\___/ \__,_|\___||___/  \___\___/ \__,_|_| |_|\__|   |
#   |                                                               |
#   '---------------------------------------------------------------'


factory_settings["elasticsearch_nodes"] = { "levels": (3, 2) }

def inventory_elasticsearch_health_number_of_nodes(info):
    return [(None, {})]

def check_elasticsearch_health_number_of_nodes(_no_item, params, info):
    for title, value in info:
        if title == "number_of_nodes":
            number_of_nodes = int(value)

    perfdata = [("number_of_nodes", number_of_nodes)]
    warn, crit = params.get("levels")

    if number_of_nodes < crit:
        state = 2
    elif number_of_nodes < warn:
        state = 1
    else:
        state = 0

    return state, "Number of nodes: %s (warn/crit at less than %s/%s)" % (number_of_nodes, warn, crit), perfdata


check_info['elasticsearch_health.number_of_nodes'] = {
    "inventory_function"        : inventory_elasticsearch_health_number_of_nodes,
    "check_function"            : check_elasticsearch_health_number_of_nodes,
    "default_levels_variable"   : "elasticsearch_nodes",
    "service_description"       : "Elasticsearch Nodes",
    "has_perfdata"              : True,
    "group"                     : "elasticsearch_number_of_nodes",
}

#   .--pending-tasks----------------------------------------------------.
#   |    _____               _ _               _            _           |
#   |   |  __ \             | (_)             | |          | |          |
#   |   | |__) |__ _ __   __| |_ _ __   __ _  | |_ __ _ ___| | _____    |
#   |   |  ___/ _ \ '_ \ / _` | | '_ \ / _` | | __/ _` / __| |/ / __|   |
#   |   | |  |  __/ | | | (_| | | | | | (_| | | || (_| \__ \   <\__ \   |
#   |   |_|   \___|_| |_|\__,_|_|_| |_|\__, |  \__\__,_|___/_|\_\___/   |
#   |                                   __/ |                           |
#   |                                  |___/                            |
#   '-------------------------------------------------------------------'

def inventory_elasticsearch_health_number_of_pending_tasks(info):
    return [(None, {})]

def check_elasticsearch_health_number_of_pending_tasks(_no_item, params, info):
    for title, value in info:
        if title == "number_of_pending_tasks":
            number_of_pending_tasks = int(value)

    perfdata = []
    state = 0

    # Calculate rates for count and size

    this_time = time.time()
    tasks_average = 30
    tasks_rate = get_rate("elasticsearch_health.pending_tasks", this_time, number_of_pending_tasks) * 60

    if params:
        tasks_warn, tasks_crit, tasks_average = params["tasks_delta"]

    message = ""

    perfdata.append(("number_of_pending_tasks", number_of_pending_tasks))
    perfdata.append(("number_of_pending_tasks_rate", tasks_rate))
    message += "%s tasks (%.2f per minute)" % ('{:,}'.format(number_of_pending_tasks), tasks_rate)
    avg_rate = get_average("elasticsearch_health.pending_tasks.avg", this_time, tasks_rate, tasks_average)
    if params:
        message += " (warn/crit: %.2f/%.2f)" % ((avg_rate * (tasks_warn / 100 + 1)), (avg_rate * (tasks_crit / 100 + 1)))
        if tasks_rate > (avg_rate * (tasks_crit / 100 + 1)):
            state = 2
        elif tasks_rate > (avg_rate * (tasks_warn / 100 + 1)):
            state = max(1, state)
    perfdata.append(("number_of_pending_tasks_avg", value))

    return state, message, perfdata


check_info['elasticsearch_health.number_of_pending_tasks'] = {
    "inventory_function"  : inventory_elasticsearch_health_number_of_pending_tasks,
    "check_function"      : check_elasticsearch_health_number_of_pending_tasks,
    "service_description" : "Elasticsearch pending Tasks",
    "has_perfdata"        : True,
    "group"               : "elasticsearch_pending_tasks",
}

#   .--relocating-shards-------------------------------------------------------------------.
#   |    _____      _                 _   _                   _                   _        |
#   |   |  __ \    | |               | | (_)                 | |                 | |       |
#   |   | |__) |___| | ___   ___ __ _| |_ _ _ __   __ _   ___| |__   __ _ _ __ __| |___    |
#   |   |  _  // _ \ |/ _ \ / __/ _` | __| | '_ \ / _` | / __| '_ \ / _` | '__/ _` / __|   |
#   |   | | \ \  __/ | (_) | (_| (_| | |_| | | | | (_| | \__ \ | | | (_| | | | (_| \__ \   |
#   |   |_|  \_\___|_|\___/ \___\__,_|\__|_|_| |_|\__, | |___/_| |_|\__,_|_|  \__,_|___/   |
#   |                                              __/ |                                   |
#   |                                             |___/                                    |
#   '--------------------------------------------------------------------------------------'

factory_settings["elasticsearch_relocating_shards"] = { "levels": (0, 3) }

def inventory_elasticsearch_health_relocating_shards(info):
    return [(None, {})]

def check_elasticsearch_health_relocating_shards(_no_item, params, info):
    for title, value in info:
        if title == "relocating_shards":
            relocating_shards = int(value)

    perfdata = [("relocating_shards", relocating_shards)]
    warn, crit = params.get("levels")

    if relocating_shards > crit:
        state = 2
    elif relocating_shards > warn:
        state = 1
    else:
        state = 0

    return state, "Relocating shards: %s (warn/crit at more than %s/%s)" % (relocating_shards, warn, crit), perfdata


check_info['elasticsearch_health.relocating_shards'] = {
    "inventory_function"        : inventory_elasticsearch_health_relocating_shards,
    "check_function"            : check_elasticsearch_health_relocating_shards,
    "default_levels_variable"   : "elasticsearch_relocating_shards",
    "service_description"       : "Elasticsearch relocating Shards",
    "has_perfdata"              : True,
    "group"                     : "elasticsearch_relocating_shards",
}

#   .--task-max-waiting-in-queue--------------------------------------------.
#   |    _____        _                                                     |
#   |   |_   _|_ _ __| |__  _ __  __ ___ __                                 |
#   |     | |/ _` (_-< / / | '  \/ _` \ \ /                                 |
#   |     |_|\__,_/__/_\_\ |_|_|_\__,_/_\_\                                 |
#   |                _ _   _             _                                  |
#   |   __ __ ____ _(_) |_(_)_ _  __ _  (_)_ _    __ _ _  _ ___ _  _ ___    |
#   |   \ V  V / _` | |  _| | ' \/ _` | | | ' \  / _` | || / -_) || / -_)   |
#   |    \_/\_/\__,_|_|\__|_|_||_\__, | |_|_||_| \__, |\_,_\___|\_,_\___|   |
#   |                            |___/              |_|                     |
#   '-----------------------------------------------------------------------'

# The maximum wait time of all tasks in the queue

factory_settings["elasticsearch_task_max_waiting"] = { "levels": (1000, 5000) }

def inventory_elasticsearch_health_task_max_waiting_in_queue_millis(info):
    return [(None, {})]

def check_elasticsearch_health_task_max_waiting_in_queue_millis(_no_item, params, info):
    for title, value in info:
        if title == "task_max_waiting_in_queue_millis":
            task_max_waiting_in_queue_millis = int(value)

    perfdata = [("task_max_waiting_in_queue_millis", task_max_waiting_in_queue_millis)]
    warn, crit = params.get("levels")

    if task_max_waiting_in_queue_millis > crit:
        state = 2
    elif task_max_waiting_in_queue_millis > warn:
        state = 1
    else:
        state = 0

    return state, "Maximum wait time: %s ms (warn/crit at more than %s ms/%s ms)" % (task_max_waiting_in_queue_millis, warn, crit), perfdata


check_info['elasticsearch_health.task_max_waiting_in_queue_millis'] = {
    "inventory_function"        : inventory_elasticsearch_health_task_max_waiting_in_queue_millis,
    "check_function"            : check_elasticsearch_health_task_max_waiting_in_queue_millis,
    "default_levels_variable"   : "elasticsearch_task_max_waiting",
    "service_description"       : "Elasticsearch Task max waiting time in queue",
    "has_perfdata"              : True,
    "group"                     : "elasticsearch_task_max_waiting_in_queue",
}

#   .--timed-out---------------------------------------------.
#   |    _______ _                    _               _      |
#   |   |__   __(_)                  | |             | |     |
#   |      | |   _ _ __ ___   ___  __| |   ___  _   _| |_    |
#   |      | |  | | '_ ` _ \ / _ \/ _` |  / _ \| | | | __|   |
#   |      | |  | | | | | | |  __/ (_| | | (_) | |_| | |_    |
#   |      |_|  |_|_| |_| |_|\___|\__,_|  \___/ \__,_|\__|   |
#   |                                                        |
#   '--------------------------------------------------------'

# true if the waitForXXX has timed out and did not match.

def inventory_elasticsearch_health_timed_out(info):
    return [(None, None)]

def check_elasticsearch_health_timed_out(_no_item, params, info):
    for title, value in info:
        if title == "timed_out":
            timed_out = value

    if timed_out == "False":
        message = "No timeout occured"
        state = 0
    else:
        message = "A timeout occured!!"
        state = 2

    return state, message

check_info['elasticsearch_health.timed_out'] = {
    "inventory_function"  : inventory_elasticsearch_health_timed_out,
    "check_function"      : check_elasticsearch_health_timed_out,
    "service_description" : "Elasticsearch Timeouts",
    "has_perfdata"        : False,
}

#   .--unassigned-shards------------------------------------------------------------------------.
#   |    _    _                     _                      _       _                   _        |
#   |   | |  | |                   (_)                    | |     | |                 | |       |
#   |   | |  | |_ __   __ _ ___ ___ _  __ _ _ __   ___  __| |  ___| |__   __ _ _ __ __| |___    |
#   |   | |  | | '_ \ / _` / __/ __| |/ _` | '_ \ / _ \/ _` | / __| '_ \ / _` | '__/ _` / __|   |
#   |   | |__| | | | | (_| \__ \__ \ | (_| | | | |  __/ (_| | \__ \ | | | (_| | | | (_| \__ \   |
#   |    \____/|_| |_|\__,_|___/___/_|\__, |_| |_|\___|\__,_| |___/_| |_|\__,_|_|  \__,_|___/   |
#   |                                  __/ |                                                    |
#   |                                 |___/                                                     |
#   '-------------------------------------------------------------------------------------------'


factory_settings["elasticsearch_unassigned_shards"] = { "levels": (0, 3) }

def inventory_elasticsearch_health_unassigned_shards(info):
    return [(None, {})]

def check_elasticsearch_health_unassigned_shards(_no_item, params, info):
    for title, value in info:
        if title == "unassigned_shards":
            unassigned_shards = int(value)

    perfdata = [("unassigned_shards", unassigned_shards)]
    warn, crit = params.get("levels")

    if unassigned_shards > crit:
        state = 2
    elif unassigned_shards > warn:
        state = 1
    else:
        state = 0

    return state, "Unassigned shards: %s (warn/crit at more than %s/%s)" % (unassigned_shards, warn, crit), perfdata


check_info['elasticsearch_health.unassigned_shards'] = {
    "inventory_function"        : inventory_elasticsearch_health_unassigned_shards,
    "check_function"            : check_elasticsearch_health_unassigned_shards,
    "default_levels_variable"   : "elasticsearch_unassigned_shards",
    "service_description"       : "Elasticsearch unassigned Shards",
    "has_perfdata"              : True,
    "group"                     : "elasticsearch_unassigned_shards",
}
